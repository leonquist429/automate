/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CounterWithoutTreasury,
  CounterWithoutTreasuryInterface,
} from "../CounterWithoutTreasury";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_pokeMe",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_gelato",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gelato",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "increaseCount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastExecuted",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pokeMe",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60c06040523480156200001157600080fd5b50604051620010b7380380620010b78339818101604052810190620000379190620000df565b81818173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505050506200019c565b600081519050620000c28162000168565b92915050565b600081519050620000d98162000182565b92915050565b60008060408385031215620000f357600080fd5b60006200010385828601620000b1565b92505060206200011685828601620000c8565b9150509250929050565b60006200012d8262000148565b9050919050565b6000620001418262000148565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001738162000120565b81146200017f57600080fd5b50565b6200018d8162000134565b81146200019957600080fd5b50565b60805160601c60a05160601c610ed3620001e460003960008181610327015281816103d101526104a50152600081816101730152818161027301526103630152610ed36000f3fe6080604052600436106100595760003560e01c806306661abd146100655780631c15ff771461009057806346d4adf2146100bb578063573ea575146100e45780638322fff21461010f578063c84eee0d1461013a57610060565b3661006057005b600080fd5b34801561007157600080fd5b5061007a610165565b6040516100879190610cb4565b60405180910390f35b34801561009c57600080fd5b506100a561016b565b6040516100b29190610cb4565b60405180910390f35b3480156100c757600080fd5b506100e260048036038101906100dd919061083f565b610171565b005b3480156100f057600080fd5b506100f9610325565b6040516101069190610b8e565b60405180910390f35b34801561011b57600080fd5b50610124610349565b6040516101319190610b73565b60405180910390f35b34801561014657600080fd5b5061014f610361565b60405161015c9190610b73565b60405180910390f35b60005481565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f690610bf4565b60405180910390fd5b60b46001544261020f9190610d57565b1161024f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024690610c94565b60405180910390fd5b806000808282546102609190610d01565b92505081905550426001819055506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b810c6366040518163ffffffff1660e01b8152600401604080518083038186803b1580156102d657600080fd5b505afa1580156102ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030e9190610868565b80925081935050506103208282610385565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b7f000000000000000000000000000000000000000000000000000000000000000081565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561049f5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168360405161041390610b5e565b60006040518083038185875af1925050503d8060008114610450576040519150601f19603f3d011682016040523d82523d6000602084013e610455565b606091505b5050905080610499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049090610c34565b60405180910390fd5b506104cb565b6104ca817f0000000000000000000000000000000000000000000000000000000000000000846104cf565b5b5050565b6105508363a9059cbb60e01b84846040516024016104ee929190610ba9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610555565b505050565b60006105b7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661061c9092919063ffffffff16565b905060008151111561061757808060200190518101906105d79190610816565b610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d90610c74565b60405180910390fd5b5b505050565b606061062b8484600085610634565b90509392505050565b606082471015610679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067090610c14565b60405180910390fd5b61068285610748565b6106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b890610c54565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516106ea9190610b47565b60006040518083038185875af1925050503d8060008114610727576040519150601f19603f3d011682016040523d82523d6000602084013e61072c565b606091505b509150915061073c82828661075b565b92505050949350505050565b600080823b905060008111915050919050565b6060831561076b578290506107bb565b60008351111561077e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b29190610bd2565b60405180910390fd5b9392505050565b6000815190506107d181610e58565b92915050565b6000815190506107e681610e6f565b92915050565b6000813590506107fb81610e86565b92915050565b60008151905061081081610e86565b92915050565b60006020828403121561082857600080fd5b6000610836848285016107d7565b91505092915050565b60006020828403121561085157600080fd5b600061085f848285016107ec565b91505092915050565b6000806040838503121561087b57600080fd5b600061088985828601610801565b925050602061089a858286016107c2565b9150509250929050565b6108ad81610d9d565b82525050565b6108bc81610d8b565b82525050565b60006108cd82610ccf565b6108d78185610ce5565b93506108e7818560208601610de5565b80840191505092915050565b60006108fe82610cda565b6109088185610cf0565b9350610918818560208601610de5565b61092181610e47565b840191505092915050565b6000610939601783610cf0565b91507f506f6b654d6552656164793a206f6e6c79506f6b654d650000000000000000006000830152602082019050919050565b6000610979602683610cf0565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006109df601e83610cf0565b91507f5f7472616e736665723a20455448207472616e73666572206661696c656400006000830152602082019050919050565b6000610a1f600083610ce5565b9150600082019050919050565b6000610a39601d83610cf0565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000610a79602a83610cf0565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000610adf602883610cf0565b91507f436f756e7465723a20696e637265617365436f756e743a2054696d65206e6f7460008301527f20656c61707365640000000000000000000000000000000000000000000000006020830152604082019050919050565b610b4181610ddb565b82525050565b6000610b5382846108c2565b915081905092915050565b6000610b6982610a12565b9150819050919050565b6000602082019050610b8860008301846108b3565b92915050565b6000602082019050610ba360008301846108a4565b92915050565b6000604082019050610bbe60008301856108b3565b610bcb6020830184610b38565b9392505050565b60006020820190508181036000830152610bec81846108f3565b905092915050565b60006020820190508181036000830152610c0d8161092c565b9050919050565b60006020820190508181036000830152610c2d8161096c565b9050919050565b60006020820190508181036000830152610c4d816109d2565b9050919050565b60006020820190508181036000830152610c6d81610a2c565b9050919050565b60006020820190508181036000830152610c8d81610a6c565b9050919050565b60006020820190508181036000830152610cad81610ad2565b9050919050565b6000602082019050610cc96000830184610b38565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610d0c82610ddb565b9150610d1783610ddb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d4c57610d4b610e18565b5b828201905092915050565b6000610d6282610ddb565b9150610d6d83610ddb565b925082821015610d8057610d7f610e18565b5b828203905092915050565b6000610d9682610dbb565b9050919050565b6000610da882610dbb565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610e03578082015181840152602081019050610de8565b83811115610e12576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b610e6181610d8b565b8114610e6c57600080fd5b50565b610e7881610daf565b8114610e8357600080fd5b50565b610e8f81610ddb565b8114610e9a57600080fd5b5056fea26469706673582212202c22232826819023782208ac06db57f60d66e5f6e321869f227305ba4968f33564736f6c63430008000033";

export class CounterWithoutTreasury__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _pokeMe: string,
    _gelato: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CounterWithoutTreasury> {
    return super.deploy(
      _pokeMe,
      _gelato,
      overrides || {}
    ) as Promise<CounterWithoutTreasury>;
  }
  getDeployTransaction(
    _pokeMe: string,
    _gelato: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_pokeMe, _gelato, overrides || {});
  }
  attach(address: string): CounterWithoutTreasury {
    return super.attach(address) as CounterWithoutTreasury;
  }
  connect(signer: Signer): CounterWithoutTreasury__factory {
    return super.connect(signer) as CounterWithoutTreasury__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterWithoutTreasuryInterface {
    return new utils.Interface(_abi) as CounterWithoutTreasuryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CounterWithoutTreasury {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CounterWithoutTreasury;
  }
}
