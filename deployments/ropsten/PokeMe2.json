{
  "address": "0x799c81DA89F5Dc7f216bd0d54f8F7c3c186a272f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_gelato",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "txFee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "execAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "execData",
          "type": "bytes"
        }
      ],
      "name": "ExecSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "TaskCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "callee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "execAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "resolverData",
          "type": "bytes"
        }
      ],
      "name": "TaskCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOfCallee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "calleeOfTask",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_task",
          "type": "bytes32"
        }
      ],
      "name": "cancelTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_execAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_execSelector",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_resolverData",
          "type": "bytes"
        }
      ],
      "name": "createTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_txFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_execAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_execData",
          "type": "bytes"
        }
      ],
      "name": "exec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "execAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_callee",
          "type": "address"
        }
      ],
      "name": "getCreditTokensByUser",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "creditTokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_func",
          "type": "string"
        }
      ],
      "name": "getSelector",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_execAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        }
      ],
      "name": "getTaskId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_callee",
          "type": "address"
        }
      ],
      "name": "getTaskIdsByUser",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "taskIds",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x441ca56231ad1ee4e3e9bf5fb35ae3b8035f8095799c8401846d48633577d40f",
  "receipt": {
    "to": null,
    "from": "0x8d26D02f7228F2527e226Cc6506B812A736a2CB2",
    "contractAddress": "0x799c81DA89F5Dc7f216bd0d54f8F7c3c186a272f",
    "transactionIndex": 1,
    "gasUsed": "2647386",
    "logsBloom": "0x
    "blockHash": "0x97a69b31399f2bf39c9bfcacec7fb60cace0c98edf9fde10bb09a1c13e4591cd",
    "transactionHash": "0x441ca56231ad1ee4e3e9bf5fb35ae3b8035f8095799c8401846d48633577d40f",
    "logs": [],
    "blockNumber": 10732339,
    "cumulativeGasUsed": "2693302",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xCc4CcD69D31F9FfDBD3BFfDe49c6aA886DaB98d9"],
  "solcInputHash": "bd512e35da8fcfa7944b46679e49661c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_gelato\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"execAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"execData\",\"type\":\"bytes\"}],\"name\":\"ExecSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"TaskCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"execAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"resolverData\",\"type\":\"bytes\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOfCallee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"calleeOfTask\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_task\",\"type\":\"bytes32\"}],\"name\":\"cancelTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_execAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_execSelector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_resolverData\",\"type\":\"bytes\"}],\"name\":\"createTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_execAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_execData\",\"type\":\"bytes\"}],\"name\":\"exec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"execAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callee\",\"type\":\"address\"}],\"name\":\"getCreditTokensByUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"creditTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_func\",\"type\":\"string\"}],\"name\":\"getSelector\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_execAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"getTaskId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callee\",\"type\":\"address\"}],\"name\":\"getTaskIdsByUser\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"taskIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PokeMe2.sol\":\"PokeMe2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x2cc1535d318fe533ffa4ad30de28f5abed305ff748bc72d0344072ac10007e29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/GelatoBytes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity 0.8.0;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x439888181cf37ca3f335d9071618a69b9965e8fd87bf0ded0175aa292969296f\",\"license\":\"UNLICENSED\"},\"contracts/Gelatofied.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract Gelatofied {\\n    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address payable public immutable gelato;\\n\\n    constructor(address payable _gelato) {\\n        gelato = _gelato;\\n    }\\n\\n    modifier gelatofy(uint256 _amount, address _paymentToken) {\\n        require(msg.sender == gelato, \\\"Gelatofied: Only gelato\\\");\\n        _;\\n        _transfer(gelato, _paymentToken, _amount);\\n    }\\n\\n    function _transfer(\\n        address payable _to,\\n        address _paymentToken,\\n        uint256 _amount\\n    ) internal {\\n        if (_paymentToken == ETH) {\\n            (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n            require(success, \\\"Gelatofied: Gelato fee failed\\\");\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(_paymentToken), _to, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cca68cced9c8f13647f10b1f0d689f0ffcc4f944e8b75eb2e38ed63f56c7539\",\"license\":\"UNLICENSED\"},\"contracts/PokeMe2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {Gelatofied} from \\\"./Gelatofied.sol\\\";\\nimport {GelatoBytes} from \\\"./GelatoBytes.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract PokeMe2 is ReentrancyGuard, Gelatofied {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using GelatoBytes for bytes;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => address) public calleeOfTask;\\n    mapping(bytes32 => address) public execAddresses;\\n    mapping(address => mapping(address => uint256)) public balanceOfCallee;\\n    mapping(address => EnumerableSet.Bytes32Set) internal _createdTasks;\\n    mapping(address => EnumerableSet.AddressSet) internal _tokenCredits;\\n\\n    constructor(address payable _gelato) Gelatofied(_gelato) {}\\n\\n    event TaskCreated(\\n        address callee,\\n        address execAddress,\\n        bytes4 selector,\\n        address resolver,\\n        bytes32 taskId,\\n        bytes resolverData\\n    );\\n    event TaskCancelled(bytes32 taskId);\\n    event FundsDeposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 indexed amount\\n    );\\n    event FundsWithdrawn(\\n        address indexed receiver,\\n        address indexed token,\\n        uint256 amount\\n    );\\n    event ExecSuccess(\\n        uint256 indexed txFee,\\n        address indexed feeToken,\\n        address indexed execAddress,\\n        bytes execData\\n    );\\n\\n    function createTask(\\n        address _execAddress,\\n        bytes4 _execSelector,\\n        address _resolver,\\n        bytes calldata _resolverData\\n    ) external {\\n        bytes32 _task = getTaskId(_execAddress, _execSelector);\\n\\n        require(\\n            calleeOfTask[_task] == address(0),\\n            \\\"PokeMe: createTask: Sender already started task\\\"\\n        );\\n\\n        _createdTasks[msg.sender].add(_task);\\n        calleeOfTask[_task] = msg.sender;\\n        execAddresses[_task] = _execAddress;\\n\\n        emit TaskCreated(msg.sender, _execAddress, _execSelector, _resolver, _task, _resolverData);\\n    }\\n\\n    function cancelTask(bytes32 _task) external {\\n        require(\\n            calleeOfTask[_task] != address(0),\\n            \\\"PokeMe: cancelTask: Sender did not start task yet\\\"\\n        );\\n\\n        _createdTasks[msg.sender].remove(_task);\\n        delete calleeOfTask[_task];\\n        delete execAddresses[_task];\\n\\n        emit TaskCancelled(_task);\\n    }\\n\\n    function exec(\\n        uint256 _txFee,\\n        address _feeToken,\\n        address _execAddress,\\n        bytes calldata _execData\\n    ) external gelatofy(_txFee, _feeToken) {\\n        bytes32 task = getTaskId(\\n            _execAddress,\\n            _execData.calldataSliceSelector()\\n        );\\n\\n        address _callee = calleeOfTask[task];\\n        require(_callee != address(0), \\\"PokeMe: exec: No task found\\\");\\n\\n        (bool success, ) = _execAddress.call(_execData);\\n        require(success, \\\"PokeMe: exec: Execution failed\\\");\\n\\n        uint256 _balanceOfCallee = balanceOfCallee[_callee][_feeToken];\\n\\n        balanceOfCallee[_callee][_feeToken] = _balanceOfCallee.sub(_txFee);\\n\\n        emit ExecSuccess(_txFee, _feeToken, _execAddress, _execData);\\n    }\\n\\n    function depositFunds(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount\\n    ) external payable {\\n        uint256 depositAmount;\\n        if (_token == ETH) {\\n            depositAmount = msg.value;\\n        } else {\\n            IERC20 token = IERC20(_token);\\n            uint256 preBalance = token.balanceOf(address(this));\\n            token.safeTransferFrom(msg.sender, address(this), _amount);\\n            uint256 postBalance = token.balanceOf(address(this));\\n            depositAmount = postBalance - preBalance;\\n        }\\n\\n        balanceOfCallee[_receiver][_token] = balanceOfCallee[_receiver][_token]\\n            .add(depositAmount);\\n\\n        if (!_tokenCredits[msg.sender].contains(_token))\\n            _tokenCredits[msg.sender].add(_token);\\n\\n        emit FundsDeposited(_receiver, _token, depositAmount);\\n    }\\n\\n    function withdrawFunds(address _token, uint256 _amount)\\n        external\\n        nonReentrant\\n    {\\n        uint256 balance = balanceOfCallee[msg.sender][_token];\\n\\n        uint256 withdrawAmount = Math.min(balance, _amount);\\n\\n        balanceOfCallee[msg.sender][_token] = balance.sub(withdrawAmount);\\n\\n        _transfer(payable(msg.sender), _token, withdrawAmount);\\n\\n        if (withdrawAmount == balance) _tokenCredits[msg.sender].remove(_token);\\n\\n        emit FundsWithdrawn(msg.sender, _token, withdrawAmount);\\n    }\\n\\n    function getTaskId(\\n        address _execAddress,\\n        bytes4 _selector\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encode(_execAddress, _selector));\\n    }\\n\\n    /*\\n    \\\"transfer(address,uint256)\\\"\\n    0xa9059cbb\\n    \\\"transferFrom(address,address,uint256)\\\"\\n    0x23b872dd\\n    */\\n    function getSelector(string calldata _func) external pure returns (bytes4) {\\n        return bytes4(keccak256(bytes(_func)));\\n    }\\n\\n    function getTaskIdsByUser(address _callee) external view returns(bytes32[] memory taskIds) {\\n        for (uint256 i; i < _createdTasks[_callee].length(); i++) {\\n            taskIds[i] = _createdTasks[_callee].at(i);\\n        }\\n    }\\n\\n    function getCreditTokensByUser(address _callee) external view returns(address[] memory creditTokens) {\\n        for (uint256 i; i < _createdTasks[_callee].length(); i++) {\\n            creditTokens[i] = _tokenCredits[_callee].at(i);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7cb551c02d1f5cab9947b44242dad1d93576de22632860a06e88c9e6025721fa\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002fe338038062002fe3833981810160405281019062000037919062000096565b8060016000819055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505062000110565b6000815190506200009081620000f6565b92915050565b600060208284031215620000a957600080fd5b6000620000b9848285016200007f565b91505092915050565b6000620000cf82620000d6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200010181620000c2565b81146200010d57600080fd5b50565b60805160601c612ea66200013d600039600081816105fc01528181610ef701526112760152612ea66000f3fe6080604052600436106100dd5760003560e01c8063812975071161007f578063c107532911610059578063c10753291461030c578063c1461d5714610335578063dd2cfd4a14610351578063ee8ca3b51461037a576100dd565b8063812975071461027b5780638322fff2146102b85780638b92696a146102e3576100dd565b8063573ea575116100bb578063573ea5751461019957806361847227146101c45780636d2dd29f1461020157806380a003ff1461023e576100dd565b80630407145c146100e2578063215a43ca1461011f5780632bf30a0e1461015c575b600080fd5b3480156100ee57600080fd5b5061010960048036038101906101049190611fab565b6103a3565b604051610116919061296a565b60405180910390f35b34801561012b57600080fd5b5061014660048036038101906101419190611fd4565b6104a5565b6040516101539190612b48565b60405180910390f35b34801561016857600080fd5b50610183600480360381019061017e9190611fab565b6104ca565b6040516101909190612948565b60405180910390f35b3480156101a557600080fd5b506101ae6105fa565b6040516101bb919061283a565b60405180910390f35b3480156101d057600080fd5b506101eb60048036038101906101e69190612180565b61061e565b6040516101f8919061281f565b60405180910390f35b34801561020d57600080fd5b5061022860048036038101906102239190612180565b610651565b604051610235919061281f565b60405180910390f35b34801561024a57600080fd5b50610265600480360381019061026091906121a9565b610684565b60405161027291906129a7565b60405180910390f35b34801561028757600080fd5b506102a2600480360381019061029d919061205f565b6106a6565b6040516102af919061298c565b60405180910390f35b3480156102c457600080fd5b506102cd6106d9565b6040516102da919061281f565b60405180910390f35b3480156102ef57600080fd5b5061030a6004803603810190610305919061209b565b6106f1565b005b34801561031857600080fd5b50610333600480360381019061032e919061211b565b6108e2565b005b61034f600480360381019061034a9190612010565b610b2b565b005b34801561035d57600080fd5b5061037860048036038101906103739190612217565b610ef3565b005b34801561038657600080fd5b506103a1600480360381019061039c9190612180565b6112a5565b005b606060005b6103ef600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611440565b81101561049f5761044781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061145590919063ffffffff16565b828281518110610480577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061049790612d74565b9150506103a8565b50919050565b6003602052816000526040600020602052806000526040600020600091509150505481565b606060005b610516600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611440565b8110156105f45761056e81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061146c90919063ffffffff16565b8282815181106105a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806105ec90612d74565b9150506104cf565b50919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082826040516106969291906127da565b6040518091039020905092915050565b600082826040516020016106bb9291906128f6565b60405160208183030381529060405280519060200120905092915050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60006106fd86866106a6565b9050600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079890612aa8565b60405180910390fd5b6107f281600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061148690919063ffffffff16565b50336001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550856002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f9d59214787f3824da2b165425d040688cd7dc25a540e26c05200d2b92c248bf9338787878588886040516108d29796959493929190612855565b60405180910390a1505050505050565b60026000541415610928576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091f90612b08565b60405180910390fd5b60026000819055506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006109bd828461149d565b90506109d281836114b690919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a5d3385836114cc565b81811415610ab857610ab684600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206115d790919063ffffffff16565b505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa92ff919b850e4909ab2261d907ef955f11bc1716733a6cbece38d163a69af8a83604051610b159190612b48565b60405180910390a3505060016000819055505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b7d57349050610cdb565b600083905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bbd919061281f565b60206040518083038186803b158015610bd557600080fd5b505afa158015610be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0d91906121ee565b9050610c3c3330868573ffffffffffffffffffffffffffffffffffffffff16611607909392919063ffffffff16565b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c77919061281f565b60206040518083038186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc791906121ee565b90508181610cd59190612c6e565b93505050505b610d6a81600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461169090919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e3b83600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206116a690919063ffffffff16565b610e9257610e9083600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206116d690919063ffffffff16565b505b808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167ff0d0e99cae184d0187b093b48894117462462379674a6e11d89c3fbb618e96b060405160405180910390a450505050565b84847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7a90612a08565b60405180910390fd5b6000610f9886610f938787611706565b6106a6565b905060006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611042576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103990612a28565b60405180910390fd5b60008773ffffffffffffffffffffffffffffffffffffffff16878760405161106b9291906127da565b6000604051808303816000865af19150503d80600081146110a8576040519150601f19603f3d011682016040523d82523d6000602084013e6110ad565b606091505b50509050806110f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e890612a68565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506111858b826114b690919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168c7f66a4a8f38001cd244b1836cb610e638d1cea110cf51ab035c6dc9d1c0264f83a8b8b6040516112659291906129c2565b60405180910390a45050505061129c7f000000000000000000000000000000000000000000000000000000000000000082846114cc565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133f90612a88565b60405180910390fd5b61139981600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061191490919063ffffffff16565b506001600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557fe1e1d79b8f28d3379fc32f617eaf54dd6bd4071074c77e91134770e04a81d62681604051611435919061298c565b60405180910390a150565b600061144e8260000161192b565b9050919050565b6000611464836000018361193c565b905092915050565b600061147b836000018361193c565b60001c905092915050565b6000611495836000018361198d565b905092915050565b60008183106114ac57816114ae565b825b905092915050565b600081836114c49190612c6e565b905092915050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115c65760008373ffffffffffffffffffffffffffffffffffffffff168260405161153a9061280a565b60006040518083038185875af1925050503d8060008114611577576040519150601f19603f3d011682016040523d82523d6000602084013e61157c565b606091505b50509050806115c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b790612b28565b60405180910390fd5b506115d2565b6115d18284836119fd565b5b505050565b60006115ff836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611a83565b905092915050565b61168a846323b872dd60e01b858585604051602401611628939291906128bf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611c09565b50505050565b6000818361169e9190612c18565b905092915050565b60006116ce836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611cd0565b905092915050565b60006116fe836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61198d565b905092915050565b6000601883836003818110611744577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c6010848460028181106117cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c600885856001818110611856577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c858560008181106118dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916171717905092915050565b60006119238360000183611a83565b905092915050565b600081600001805490509050919050565b600082600001828154811061197a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b60006119998383611cd0565b6119f25782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506119f7565b600090505b92915050565b611a7e8363a9059cbb60e01b8484604051602401611a1c92919061291f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611c09565b505050565b60008083600101600084815260200190815260200160002054905060008114611bfd576000600182611ab59190612c6e565b9050600060018660000180549050611acd9190612c6e565b9050818114611b88576000866000018281548110611b14577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110611b5e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611bc2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611c03565b60009150505b92915050565b6000611c6b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611cf39092919063ffffffff16565b9050600081511115611ccb5780806020019051810190611c8b9190612157565b611cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc190612ae8565b60405180910390fd5b5b505050565b600080836001016000848152602001908152602001600020541415905092915050565b6060611d028484600085611d0b565b90509392505050565b606082471015611d50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4790612a48565b60405180910390fd5b611d5985611e1f565b611d98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8f90612ac8565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611dc191906127f3565b60006040518083038185875af1925050503d8060008114611dfe576040519150601f19603f3d011682016040523d82523d6000602084013e611e03565b606091505b5091509150611e13828286611e32565b92505050949350505050565b600080823b905060008111915050919050565b60608315611e4257829050611e92565b600083511115611e555782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8991906129e6565b60405180910390fd5b9392505050565b600081359050611ea881612dfd565b92915050565b600081519050611ebd81612e14565b92915050565b600081359050611ed281612e2b565b92915050565b600081359050611ee781612e42565b92915050565b60008083601f840112611eff57600080fd5b8235905067ffffffffffffffff811115611f1857600080fd5b602083019150836001820283011115611f3057600080fd5b9250929050565b60008083601f840112611f4957600080fd5b8235905067ffffffffffffffff811115611f6257600080fd5b602083019150836001820283011115611f7a57600080fd5b9250929050565b600081359050611f9081612e59565b92915050565b600081519050611fa581612e59565b92915050565b600060208284031215611fbd57600080fd5b6000611fcb84828501611e99565b91505092915050565b60008060408385031215611fe757600080fd5b6000611ff585828601611e99565b925050602061200685828601611e99565b9150509250929050565b60008060006060848603121561202557600080fd5b600061203386828701611e99565b935050602061204486828701611e99565b925050604061205586828701611f81565b9150509250925092565b6000806040838503121561207257600080fd5b600061208085828601611e99565b925050602061209185828601611ed8565b9150509250929050565b6000806000806000608086880312156120b357600080fd5b60006120c188828901611e99565b95505060206120d288828901611ed8565b94505060406120e388828901611e99565b935050606086013567ffffffffffffffff81111561210057600080fd5b61210c88828901611eed565b92509250509295509295909350565b6000806040838503121561212e57600080fd5b600061213c85828601611e99565b925050602061214d85828601611f81565b9150509250929050565b60006020828403121561216957600080fd5b600061217784828501611eae565b91505092915050565b60006020828403121561219257600080fd5b60006121a084828501611ec3565b91505092915050565b600080602083850312156121bc57600080fd5b600083013567ffffffffffffffff8111156121d657600080fd5b6121e285828601611f37565b92509250509250929050565b60006020828403121561220057600080fd5b600061220e84828501611f96565b91505092915050565b60008060008060006080868803121561222f57600080fd5b600061223d88828901611f81565b955050602061224e88828901611e99565b945050604061225f88828901611e99565b935050606086013567ffffffffffffffff81111561227c57600080fd5b61228888828901611eed565b92509250509295509295909350565b60006122a383836122d6565b60208301905092915050565b60006122bb83836123b0565b60208301905092915050565b6122d081612cb4565b82525050565b6122df81612ca2565b82525050565b6122ee81612ca2565b82525050565b60006122ff82612b83565b6123098185612bc9565b935061231483612b63565b8060005b8381101561234557815161232c8882612297565b975061233783612baf565b925050600181019050612318565b5085935050505092915050565b600061235d82612b8e565b6123678185612bda565b935061237283612b73565b8060005b838110156123a357815161238a88826122af565b975061239583612bbc565b925050600181019050612376565b5085935050505092915050565b6123b981612cd2565b82525050565b6123c881612cd2565b82525050565b6123d781612cdc565b82525050565b60006123e98385612beb565b93506123f6838584612d32565b6123ff83612dec565b840190509392505050565b60006124168385612bfc565b9350612423838584612d32565b82840190509392505050565b600061243a82612b99565b6124448185612bfc565b9350612454818560208601612d41565b80840191505092915050565b600061246b82612ba4565b6124758185612c07565b9350612485818560208601612d41565b61248e81612dec565b840191505092915050565b60006124a6601783612c07565b91507f47656c61746f666965643a204f6e6c792067656c61746f0000000000000000006000830152602082019050919050565b60006124e6601b83612c07565b91507f506f6b654d653a20657865633a204e6f207461736b20666f756e6400000000006000830152602082019050919050565b6000612526602683612c07565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061258c601e83612c07565b91507f506f6b654d653a20657865633a20457865637574696f6e206661696c656400006000830152602082019050919050565b60006125cc603183612c07565b91507f506f6b654d653a2063616e63656c5461736b3a2053656e64657220646964206e60008301527f6f74207374617274207461736b207965740000000000000000000000000000006020830152604082019050919050565b6000612632602f83612c07565b91507f506f6b654d653a206372656174655461736b3a2053656e64657220616c72656160008301527f64792073746172746564207461736b00000000000000000000000000000000006020830152604082019050919050565b6000612698600083612bfc565b9150600082019050919050565b60006126b2601d83612c07565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b60006126f2602a83612c07565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000612758601f83612c07565b91507f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006000830152602082019050919050565b6000612798601d83612c07565b91507f47656c61746f666965643a2047656c61746f20666565206661696c65640000006000830152602082019050919050565b6127d481612d28565b82525050565b60006127e782848661240a565b91508190509392505050565b60006127ff828461242f565b915081905092915050565b60006128158261268b565b9150819050919050565b600060208201905061283460008301846122e5565b92915050565b600060208201905061284f60008301846122c7565b92915050565b600060c08201905061286a600083018a6122e5565b61287760208301896122e5565b61288460408301886123ce565b61289160608301876122e5565b61289e60808301866123bf565b81810360a08301526128b18184866123dd565b905098975050505050505050565b60006060820190506128d460008301866122e5565b6128e160208301856122e5565b6128ee60408301846127cb565b949350505050565b600060408201905061290b60008301856122e5565b61291860208301846123ce565b9392505050565b600060408201905061293460008301856122e5565b61294160208301846127cb565b9392505050565b6000602082019050818103600083015261296281846122f4565b905092915050565b600060208201905081810360008301526129848184612352565b905092915050565b60006020820190506129a160008301846123bf565b92915050565b60006020820190506129bc60008301846123ce565b92915050565b600060208201905081810360008301526129dd8184866123dd565b90509392505050565b60006020820190508181036000830152612a008184612460565b905092915050565b60006020820190508181036000830152612a2181612499565b9050919050565b60006020820190508181036000830152612a41816124d9565b9050919050565b60006020820190508181036000830152612a6181612519565b9050919050565b60006020820190508181036000830152612a818161257f565b9050919050565b60006020820190508181036000830152612aa1816125bf565b9050919050565b60006020820190508181036000830152612ac181612625565b9050919050565b60006020820190508181036000830152612ae1816126a5565b9050919050565b60006020820190508181036000830152612b01816126e5565b9050919050565b60006020820190508181036000830152612b218161274b565b9050919050565b60006020820190508181036000830152612b418161278b565b9050919050565b6000602082019050612b5d60008301846127cb565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612c2382612d28565b9150612c2e83612d28565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612c6357612c62612dbd565b5b828201905092915050565b6000612c7982612d28565b9150612c8483612d28565b925082821015612c9757612c96612dbd565b5b828203905092915050565b6000612cad82612d08565b9050919050565b6000612cbf82612d08565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612d5f578082015181840152602081019050612d44565b83811115612d6e576000848401525b50505050565b6000612d7f82612d28565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612db257612db1612dbd565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b612e0681612ca2565b8114612e1157600080fd5b50565b612e1d81612cc6565b8114612e2857600080fd5b50565b612e3481612cd2565b8114612e3f57600080fd5b50565b612e4b81612cdc565b8114612e5657600080fd5b50565b612e6281612d28565b8114612e6d57600080fd5b5056fea26469706673582212203552dc50b2f8a60d08d601d45353cbc6c236207e504e1c612cda9234ccf14c3164736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c8063812975071161007f578063c107532911610059578063c10753291461030c578063c1461d5714610335578063dd2cfd4a14610351578063ee8ca3b51461037a576100dd565b8063812975071461027b5780638322fff2146102b85780638b92696a146102e3576100dd565b8063573ea575116100bb578063573ea5751461019957806361847227146101c45780636d2dd29f1461020157806380a003ff1461023e576100dd565b80630407145c146100e2578063215a43ca1461011f5780632bf30a0e1461015c575b600080fd5b3480156100ee57600080fd5b5061010960048036038101906101049190611fab565b6103a3565b604051610116919061296a565b60405180910390f35b34801561012b57600080fd5b5061014660048036038101906101419190611fd4565b6104a5565b6040516101539190612b48565b60405180910390f35b34801561016857600080fd5b50610183600480360381019061017e9190611fab565b6104ca565b6040516101909190612948565b60405180910390f35b3480156101a557600080fd5b506101ae6105fa565b6040516101bb919061283a565b60405180910390f35b3480156101d057600080fd5b506101eb60048036038101906101e69190612180565b61061e565b6040516101f8919061281f565b60405180910390f35b34801561020d57600080fd5b5061022860048036038101906102239190612180565b610651565b604051610235919061281f565b60405180910390f35b34801561024a57600080fd5b50610265600480360381019061026091906121a9565b610684565b60405161027291906129a7565b60405180910390f35b34801561028757600080fd5b506102a2600480360381019061029d919061205f565b6106a6565b6040516102af919061298c565b60405180910390f35b3480156102c457600080fd5b506102cd6106d9565b6040516102da919061281f565b60405180910390f35b3480156102ef57600080fd5b5061030a6004803603810190610305919061209b565b6106f1565b005b34801561031857600080fd5b50610333600480360381019061032e919061211b565b6108e2565b005b61034f600480360381019061034a9190612010565b610b2b565b005b34801561035d57600080fd5b5061037860048036038101906103739190612217565b610ef3565b005b34801561038657600080fd5b506103a1600480360381019061039c9190612180565b6112a5565b005b606060005b6103ef600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611440565b81101561049f5761044781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061145590919063ffffffff16565b828281518110610480577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061049790612d74565b9150506103a8565b50919050565b6003602052816000526040600020602052806000526040600020600091509150505481565b606060005b610516600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611440565b8110156105f45761056e81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061146c90919063ffffffff16565b8282815181106105a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806105ec90612d74565b9150506104cf565b50919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082826040516106969291906127da565b6040518091039020905092915050565b600082826040516020016106bb9291906128f6565b60405160208183030381529060405280519060200120905092915050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60006106fd86866106a6565b9050600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079890612aa8565b60405180910390fd5b6107f281600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061148690919063ffffffff16565b50336001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550856002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f9d59214787f3824da2b165425d040688cd7dc25a540e26c05200d2b92c248bf9338787878588886040516108d29796959493929190612855565b60405180910390a1505050505050565b60026000541415610928576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091f90612b08565b60405180910390fd5b60026000819055506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006109bd828461149d565b90506109d281836114b690919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a5d3385836114cc565b81811415610ab857610ab684600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206115d790919063ffffffff16565b505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa92ff919b850e4909ab2261d907ef955f11bc1716733a6cbece38d163a69af8a83604051610b159190612b48565b60405180910390a3505060016000819055505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b7d57349050610cdb565b600083905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bbd919061281f565b60206040518083038186803b158015610bd557600080fd5b505afa158015610be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0d91906121ee565b9050610c3c3330868573ffffffffffffffffffffffffffffffffffffffff16611607909392919063ffffffff16565b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c77919061281f565b60206040518083038186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc791906121ee565b90508181610cd59190612c6e565b93505050505b610d6a81600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461169090919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e3b83600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206116a690919063ffffffff16565b610e9257610e9083600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206116d690919063ffffffff16565b505b808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167ff0d0e99cae184d0187b093b48894117462462379674a6e11d89c3fbb618e96b060405160405180910390a450505050565b84847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7a90612a08565b60405180910390fd5b6000610f9886610f938787611706565b6106a6565b905060006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611042576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103990612a28565b60405180910390fd5b60008773ffffffffffffffffffffffffffffffffffffffff16878760405161106b9291906127da565b6000604051808303816000865af19150503d80600081146110a8576040519150601f19603f3d011682016040523d82523d6000602084013e6110ad565b606091505b50509050806110f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e890612a68565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506111858b826114b690919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168c7f66a4a8f38001cd244b1836cb610e638d1cea110cf51ab035c6dc9d1c0264f83a8b8b6040516112659291906129c2565b60405180910390a45050505061129c7f000000000000000000000000000000000000000000000000000000000000000082846114cc565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133f90612a88565b60405180910390fd5b61139981600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061191490919063ffffffff16565b506001600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557fe1e1d79b8f28d3379fc32f617eaf54dd6bd4071074c77e91134770e04a81d62681604051611435919061298c565b60405180910390a150565b600061144e8260000161192b565b9050919050565b6000611464836000018361193c565b905092915050565b600061147b836000018361193c565b60001c905092915050565b6000611495836000018361198d565b905092915050565b60008183106114ac57816114ae565b825b905092915050565b600081836114c49190612c6e565b905092915050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115c65760008373ffffffffffffffffffffffffffffffffffffffff168260405161153a9061280a565b60006040518083038185875af1925050503d8060008114611577576040519150601f19603f3d011682016040523d82523d6000602084013e61157c565b606091505b50509050806115c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b790612b28565b60405180910390fd5b506115d2565b6115d18284836119fd565b5b505050565b60006115ff836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611a83565b905092915050565b61168a846323b872dd60e01b858585604051602401611628939291906128bf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611c09565b50505050565b6000818361169e9190612c18565b905092915050565b60006116ce836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611cd0565b905092915050565b60006116fe836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61198d565b905092915050565b6000601883836003818110611744577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c6010848460028181106117cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c600885856001818110611856577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c858560008181106118dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916171717905092915050565b60006119238360000183611a83565b905092915050565b600081600001805490509050919050565b600082600001828154811061197a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b60006119998383611cd0565b6119f25782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506119f7565b600090505b92915050565b611a7e8363a9059cbb60e01b8484604051602401611a1c92919061291f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611c09565b505050565b60008083600101600084815260200190815260200160002054905060008114611bfd576000600182611ab59190612c6e565b9050600060018660000180549050611acd9190612c6e565b9050818114611b88576000866000018281548110611b14577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110611b5e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611bc2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611c03565b60009150505b92915050565b6000611c6b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611cf39092919063ffffffff16565b9050600081511115611ccb5780806020019051810190611c8b9190612157565b611cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc190612ae8565b60405180910390fd5b5b505050565b600080836001016000848152602001908152602001600020541415905092915050565b6060611d028484600085611d0b565b90509392505050565b606082471015611d50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4790612a48565b60405180910390fd5b611d5985611e1f565b611d98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8f90612ac8565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611dc191906127f3565b60006040518083038185875af1925050503d8060008114611dfe576040519150601f19603f3d011682016040523d82523d6000602084013e611e03565b606091505b5091509150611e13828286611e32565b92505050949350505050565b600080823b905060008111915050919050565b60608315611e4257829050611e92565b600083511115611e555782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8991906129e6565b60405180910390fd5b9392505050565b600081359050611ea881612dfd565b92915050565b600081519050611ebd81612e14565b92915050565b600081359050611ed281612e2b565b92915050565b600081359050611ee781612e42565b92915050565b60008083601f840112611eff57600080fd5b8235905067ffffffffffffffff811115611f1857600080fd5b602083019150836001820283011115611f3057600080fd5b9250929050565b60008083601f840112611f4957600080fd5b8235905067ffffffffffffffff811115611f6257600080fd5b602083019150836001820283011115611f7a57600080fd5b9250929050565b600081359050611f9081612e59565b92915050565b600081519050611fa581612e59565b92915050565b600060208284031215611fbd57600080fd5b6000611fcb84828501611e99565b91505092915050565b60008060408385031215611fe757600080fd5b6000611ff585828601611e99565b925050602061200685828601611e99565b9150509250929050565b60008060006060848603121561202557600080fd5b600061203386828701611e99565b935050602061204486828701611e99565b925050604061205586828701611f81565b9150509250925092565b6000806040838503121561207257600080fd5b600061208085828601611e99565b925050602061209185828601611ed8565b9150509250929050565b6000806000806000608086880312156120b357600080fd5b60006120c188828901611e99565b95505060206120d288828901611ed8565b94505060406120e388828901611e99565b935050606086013567ffffffffffffffff81111561210057600080fd5b61210c88828901611eed565b92509250509295509295909350565b6000806040838503121561212e57600080fd5b600061213c85828601611e99565b925050602061214d85828601611f81565b9150509250929050565b60006020828403121561216957600080fd5b600061217784828501611eae565b91505092915050565b60006020828403121561219257600080fd5b60006121a084828501611ec3565b91505092915050565b600080602083850312156121bc57600080fd5b600083013567ffffffffffffffff8111156121d657600080fd5b6121e285828601611f37565b92509250509250929050565b60006020828403121561220057600080fd5b600061220e84828501611f96565b91505092915050565b60008060008060006080868803121561222f57600080fd5b600061223d88828901611f81565b955050602061224e88828901611e99565b945050604061225f88828901611e99565b935050606086013567ffffffffffffffff81111561227c57600080fd5b61228888828901611eed565b92509250509295509295909350565b60006122a383836122d6565b60208301905092915050565b60006122bb83836123b0565b60208301905092915050565b6122d081612cb4565b82525050565b6122df81612ca2565b82525050565b6122ee81612ca2565b82525050565b60006122ff82612b83565b6123098185612bc9565b935061231483612b63565b8060005b8381101561234557815161232c8882612297565b975061233783612baf565b925050600181019050612318565b5085935050505092915050565b600061235d82612b8e565b6123678185612bda565b935061237283612b73565b8060005b838110156123a357815161238a88826122af565b975061239583612bbc565b925050600181019050612376565b5085935050505092915050565b6123b981612cd2565b82525050565b6123c881612cd2565b82525050565b6123d781612cdc565b82525050565b60006123e98385612beb565b93506123f6838584612d32565b6123ff83612dec565b840190509392505050565b60006124168385612bfc565b9350612423838584612d32565b82840190509392505050565b600061243a82612b99565b6124448185612bfc565b9350612454818560208601612d41565b80840191505092915050565b600061246b82612ba4565b6124758185612c07565b9350612485818560208601612d41565b61248e81612dec565b840191505092915050565b60006124a6601783612c07565b91507f47656c61746f666965643a204f6e6c792067656c61746f0000000000000000006000830152602082019050919050565b60006124e6601b83612c07565b91507f506f6b654d653a20657865633a204e6f207461736b20666f756e6400000000006000830152602082019050919050565b6000612526602683612c07565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061258c601e83612c07565b91507f506f6b654d653a20657865633a20457865637574696f6e206661696c656400006000830152602082019050919050565b60006125cc603183612c07565b91507f506f6b654d653a2063616e63656c5461736b3a2053656e64657220646964206e60008301527f6f74207374617274207461736b207965740000000000000000000000000000006020830152604082019050919050565b6000612632602f83612c07565b91507f506f6b654d653a206372656174655461736b3a2053656e64657220616c72656160008301527f64792073746172746564207461736b00000000000000000000000000000000006020830152604082019050919050565b6000612698600083612bfc565b9150600082019050919050565b60006126b2601d83612c07565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b60006126f2602a83612c07565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000612758601f83612c07565b91507f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006000830152602082019050919050565b6000612798601d83612c07565b91507f47656c61746f666965643a2047656c61746f20666565206661696c65640000006000830152602082019050919050565b6127d481612d28565b82525050565b60006127e782848661240a565b91508190509392505050565b60006127ff828461242f565b915081905092915050565b60006128158261268b565b9150819050919050565b600060208201905061283460008301846122e5565b92915050565b600060208201905061284f60008301846122c7565b92915050565b600060c08201905061286a600083018a6122e5565b61287760208301896122e5565b61288460408301886123ce565b61289160608301876122e5565b61289e60808301866123bf565b81810360a08301526128b18184866123dd565b905098975050505050505050565b60006060820190506128d460008301866122e5565b6128e160208301856122e5565b6128ee60408301846127cb565b949350505050565b600060408201905061290b60008301856122e5565b61291860208301846123ce565b9392505050565b600060408201905061293460008301856122e5565b61294160208301846127cb565b9392505050565b6000602082019050818103600083015261296281846122f4565b905092915050565b600060208201905081810360008301526129848184612352565b905092915050565b60006020820190506129a160008301846123bf565b92915050565b60006020820190506129bc60008301846123ce565b92915050565b600060208201905081810360008301526129dd8184866123dd565b90509392505050565b60006020820190508181036000830152612a008184612460565b905092915050565b60006020820190508181036000830152612a2181612499565b9050919050565b60006020820190508181036000830152612a41816124d9565b9050919050565b60006020820190508181036000830152612a6181612519565b9050919050565b60006020820190508181036000830152612a818161257f565b9050919050565b60006020820190508181036000830152612aa1816125bf565b9050919050565b60006020820190508181036000830152612ac181612625565b9050919050565b60006020820190508181036000830152612ae1816126a5565b9050919050565b60006020820190508181036000830152612b01816126e5565b9050919050565b60006020820190508181036000830152612b218161274b565b9050919050565b60006020820190508181036000830152612b418161278b565b9050919050565b6000602082019050612b5d60008301846127cb565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612c2382612d28565b9150612c2e83612d28565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612c6357612c62612dbd565b5b828201905092915050565b6000612c7982612d28565b9150612c8483612d28565b925082821015612c9757612c96612dbd565b5b828203905092915050565b6000612cad82612d08565b9050919050565b6000612cbf82612d08565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612d5f578082015181840152602081019050612d44565b83811115612d6e576000848401525b50505050565b6000612d7f82612d28565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612db257612db1612dbd565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b612e0681612ca2565b8114612e1157600080fd5b50565b612e1d81612cc6565b8114612e2857600080fd5b50565b612e3481612cd2565b8114612e3f57600080fd5b50565b612e4b81612cdc565b8114612e5657600080fd5b50565b612e6281612d28565b8114612e6d57600080fd5b5056fea26469706673582212203552dc50b2f8a60d08d601d45353cbc6c236207e504e1c612cda9234ccf14c3164736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/PokeMe2.sol:PokeMe2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1899,
        "contract": "contracts/PokeMe2.sol:PokeMe2",
        "label": "calleeOfTask",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1903,
        "contract": "contracts/PokeMe2.sol:PokeMe2",
        "label": "execAddresses",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1909,
        "contract": "contracts/PokeMe2.sol:PokeMe2",
        "label": "balanceOfCallee",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1914,
        "contract": "contracts/PokeMe2.sol:PokeMe2",
        "label": "_createdTasks",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)1240_storage)"
      },
      {
        "astId": 1919,
        "contract": "contracts/PokeMe2.sol:PokeMe2",
        "label": "_tokenCredits",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AddressSet)1331_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(AddressSet)1331_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1331_storage"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)1240_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)1240_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1331_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1330,
            "contract": "contracts/PokeMe2.sol:PokeMe2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1060_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)1240_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 1239,
            "contract": "contracts/PokeMe2.sol:PokeMe2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1060_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1060_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1055,
            "contract": "contracts/PokeMe2.sol:PokeMe2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1059,
            "contract": "contracts/PokeMe2.sol:PokeMe2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
